from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

SPOTIFY_CLIENT_ID = os.getenv('CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('CLIENT_SECRET')
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_API_URL = "https://api.spotify.com/v1"


def get_spotify_token():
    print("Getting Spotify token ...")
    response = requests.post(
        SPOTIFY_AUTH_URL,
        {
            "grant_type": "client_credentials",
            "client_id": SPOTIFY_CLIENT_ID,
            "client_secret": SPOTIFY_CLIENT_SECRET,
        },
    )
    response_data = response.json()
    return response_data.get("access_token")


def fetch_audio_features(token, track_ids):
    """Return a mapping of track ID to audio features."""
    headers = {"Authorization": f"Bearer {token}"}
    url = f"{SPOTIFY_API_URL}/audio-features"
    resp = requests.get(url, headers=headers, params={"ids": ",".join(track_ids)})
    data = resp.json().get("audio_features", [])
    return {f["id"]: f for f in data if f}

@app.route('/')
def serve_index():
    print(f"Serving index.html from: {os.path.abspath('.')}")
    return send_from_directory('.', 'index.html')

@app.route('/favicon.ico')
def favicon():
    print(f"Serving favicon from: {os.path.abspath('.')}")
    return send_from_directory('.', 'favicon.ico')

@app.route('/songs', methods=['GET'])
def get_songs():
    """Return songs from Spotify matching the given artists/genres and pace."""
    artists = request.args.get('artists', '')
    genres = request.args.get('genres', '')
    pace = request.args.get('pace', type=float)

    token = get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}

    query_parts = []
    if artists:
        artist_terms = [f'artist:"{a.strip()}"' for a in artists.split(',') if a.strip()]
        query_parts.extend(artist_terms)
    if genres:
        genre_terms = [g.strip() for g in genres.split(',') if g.strip()]
        # Spotify search does not filter tracks by genre directly; include genres as plain terms
        query_parts.extend(genre_terms)
    query = ' '.join(query_parts) or 'music'

    search_url = f"{SPOTIFY_API_URL}/search"
    params = {"q": query, "type": "track", "limit": 20}
    resp = requests.get(search_url, headers=headers, params=params)
    items = resp.json().get('tracks', {}).get('items', [])

    track_ids = [t['id'] for t in items]
    features = fetch_audio_features(token, track_ids)

    desired_tempo = 240 / pace if pace else None
    songs = []
    for track in items:
        tempo = features.get(track['id'], {}).get('tempo')
        if desired_tempo and tempo:
            if abs(tempo - desired_tempo) > 15:
                continue
        songs.append({
            'title': track['name'],
            'artist': track['artists'][0]['name'],
            'tempo': tempo
        })

    return jsonify({'songs': songs})

# Query Reqs.
# Artist List OR Genre
# Pace OR BPM

@app.route('/search', methods=['GET'])
def search_spotify():
    query = request.args.get('query')
    search_type = request.args.get('type', 'artist')
    
    if not query:
        return jsonify({"error": "Query parameter is required"}), 400
    
    token = get_spotify_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    search_url = f"{SPOTIFY_API_URL}/search"
    params = {
        "q": query,
        "type": search_type,
        "limit": 10
    }
    
    response = requests.get(search_url, headers=headers, params=params)
    return jsonify(response.json())


@app.route('/create_playlist', methods=['POST'])
def create_playlist():
    data = request.json
    user_id = data.get('user_id')
    playlist_name = data.get('name', 'New Playlist')
    token = data.get('token')
    
    if not user_id or not token:
        return jsonify({"error": "User ID and token are required"}), 400
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "name": playlist_name,
        "description": "Generated by the running playlist app",
        "public": False
    }
    
    playlist_url = f"{SPOTIFY_API_URL}/users/{user_id}/playlists"
    response = requests.post(playlist_url, headers=headers, json=payload)
    return jsonify(response.json())


if __name__ == '__main__':
    print("Booting up BeatsForRunning ...")
    app.run(debug=True)
