from flask import Flask, request, jsonify
import requests
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

SPOTIFY_CLIENT_ID = os.getenv('CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('CLIENT_SECRET')
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_API_URL = "https://api.spotify.com/v1"


def get_spotify_token():
    print("Getting Spotify token ...")
    response = requests.post(
        SPOTIFY_AUTH_URL,
        {
            "grant_type": "client_credentials",
            "client_id": SPOTIFY_CLIENT_ID,
            "client_secret": SPOTIFY_CLIENT_SECRET,
        },
    )
    response_data = response.json()
    return response_data.get("access_token")


# Query Reqs.
# Artist List OR Genre
# Pace OR BPM

@app.route('/search', methods=['GET'])
def search_spotify():
    query = request.args.get('query')
    search_type = request.args.get('type', 'artist')
    
    if not query:
        return jsonify({"error": "Query parameter is required"}), 400
    
    token = get_spotify_token()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    search_url = f"{SPOTIFY_API_URL}/search"
    params = {
        "q": query,
        "type": search_type,
        "limit": 10
    }
    
    response = requests.get(search_url, headers=headers, params=params)
    return jsonify(response.json())


@app.route('/create_playlist', methods=['POST'])
def create_playlist():
    data = request.json
    user_id = data.get('user_id')
    playlist_name = data.get('name', 'New Playlist')
    token = data.get('token')
    
    if not user_id or not token:
        return jsonify({"error": "User ID and token are required"}), 400
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "name": playlist_name,
        "description": "Generated by the running playlist app",
        "public": False
    }
    
    playlist_url = f"{SPOTIFY_API_URL}/users/{user_id}/playlists"
    response = requests.post(playlist_url, headers=headers, json=payload)
    return jsonify(response.json())


if __name__ == '__main__':
    print("Booting up BeatsForRunning ...")
    app.run(debug=True)
